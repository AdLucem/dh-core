
==================== FINAL INTERFACE ====================
2019-02-27 19:53:18.030562556 UTC

interface dense-linear-algebra-0.1.0.0-9CfM7PgmKUpF60PvHRvGgf:Statistics.Matrix 8063
  interface hash: 38e993745f686cab7b2789ce0110f430
  ABI hash: 139ad343f7aee20177eb49ca95eab3d3
  export-list hash: dfb7e20f45fcb48692a30be5bca55100
  orphan hash: a9b9156dd881edce966522e6b734b905
  flag hash: 4b54d24fdbeffc6cfd2276e99e2fc115
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Statistics.Matrix.bounds
  Statistics.Matrix.center
  Statistics.Matrix.column
  Statistics.Matrix.diag
  Statistics.Matrix.dimension
  Statistics.Matrix.fromColumns
  Statistics.Matrix.fromList
  Statistics.Matrix.fromRowLists
  Statistics.Matrix.fromRows
  Statistics.Matrix.fromVector
  Statistics.Matrix.generate
  Statistics.Matrix.generateSym
  Statistics.Matrix.hasNaN
  Statistics.Matrix.ident
  Statistics.Matrix.map
  Statistics.Matrix.multiply
  Statistics.Matrix.multiplyV
  Statistics.Matrix.norm
  Statistics.Matrix.power
  Statistics.Matrix.row
  Statistics.Matrix.toColumns
  Statistics.Matrix.toList
  Statistics.Matrix.toRowLists
  Statistics.Matrix.toRows
  Statistics.Matrix.toVector
  Statistics.Matrix.transpose
  Statistics.Matrix.unsafeBounds
  Statistics.Matrix.unsafeIndex
  Statistics.Matrix.Function.for
  Statistics.Matrix.Types.Matrix{Statistics.Matrix.Types.Matrix _vector cols rows}
  Statistics.Matrix.Types.Vector
module dependencies: Statistics.Matrix.Function
                     Statistics.Matrix.Mutable Statistics.Matrix.Types
package dependencies: array-0.5.3.0 base-4.12.0.0 deepseq-1.4.4.0
                      ghc-boot-th-8.6.3 ghc-prim-0.5.3 integer-gmp-1.0.2.0
                      math-functions-0.3.1.0 pretty-1.1.3.6 primitive-0.6.4.0
                      template-haskell-2.14.0.0 transformers-0.5.5.0 vector-0.12.0.2
                      vector-th-unbox-0.2.1.6
orphans: vector-0.12.0.2:Data.Vector.Unboxed
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         math-functions-0.3.1.0:Numeric.Sum
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Applicative f4c86ba32601955aaee0c0abccbaeade
import  -/  base-4.12.0.0:Control.Monad.ST 9831a35a97bf725d698400845dbc0ccd
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Functor 22aac80fdb6c7b7f60b4aaab86afee64
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Err 28d622b06927ca4c3b335ec5326c34b2
import  -/  base-4.12.0.0:GHC.Float b958d4f9aada71a4e6641f5c6bbcbc30
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.ST 218d7508dc46ae62ed07f9dc97fd6fd1
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  Statistics.Matrix.Function 0d2f9f32ad7ae03fa8f250e2f0be0b5c
  exports: 410b36d07ecf73488da5e6e3952879f2
  for 216d25f6988462018f1f06e5081e172e
  square 71d55991adef89e544aec020ac2a57fc
import  -/  Statistics.Matrix.Mutable 4e30ab6a7bd9ce223e9906bd793dbb85
  exports: 35f3425ae925ebce59f4acc697691c91
  unsafeFreeze e008f730845915cd0b72fed90726c389
  unsafeNew 199ed803a91933ceb2684800ee0897e7
  unsafeWrite 60ce5551f87bbe55dc254ececd0221a8
import  -/  Statistics.Matrix.Types e85952c26980c1752607abe8d259c6cf
  exports: faf66659a595f3f6f557fd7556802b00
  Matrix 963451ef95b030d1f63dfa05538574cf
  Matrix 870819578589d9fee9a8af211ba11416
  Vector 3ba9b7f5c6a44a8ca0ba51db609d7ef9
  _vector 870819578589d9fee9a8af211ba11416
  cols 870819578589d9fee9a8af211ba11416
  rows 870819578589d9fee9a8af211ba11416
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  math-functions-0.3.1.0:Numeric.Sum cbc14121a9a62b7e0b4adff8702ec307
import  -/  vector-0.12.0.2:Data.Vector.Unboxed 3ec9008297a7b27b6fe569e181327338
import  -/  vector-0.12.0.2:Data.Vector.Unboxed.Base 375baed2db9fb62dbb109ad31742d838
import  -/  vector-0.12.0.2:Data.Vector.Unboxed.Mutable d5dd6163341ecef0e754386a130baa2d
761b4f1669aecf2045e18e54b4c500b8
  $sunsafeIndex ::
    Data.Vector.Unboxed.Base.Vector GHC.Types.Double
    -> GHC.Types.Int -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLS),1*U(U,A,U)><S(S),1*U(U)>m,
     Inline: [1] (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (v1 :: Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                   (i :: GHC.Types.Int) ->
                 case v1
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case i of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.indexDoubleArray#
                        dt2
                        (GHC.Prim.+# dt y) of wild2 { DEFAULT ->
                 (GHC.Types.D# wild2)
                   `cast`
                 (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Double>_R)) } } })
                  `cast`
                (<Data.Vector.Unboxed.Base.Vector GHC.Types.Double>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Double>_R) -}
b0c2c866711f066c3e7fa61dadb515ed
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Statistics.Matrix.$trModule3
                   Statistics.Matrix.$trModule1) -}
31df5d63100b5b0fc2991dbab850f42a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Statistics.Matrix.$trModule2) -}
8420013390e9ba56fe3647f85e98a8a5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Statistics.Matrix"#) -}
e7016ea589402149dc1c6344e6411e38
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Statistics.Matrix.$trModule4) -}
6af0bb93c5d8038434f01559048df458
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("dense-linear-algebra-0.1.0.0-9CfM7PgmKUpF60PvHRvGgf"#) -}
896b4fb46ab089e546e3cd98cde29c84
  $wdiag ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.ByteArray#) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           y1 :: GHC.Prim.Int# = GHC.Prim.*# ww1 ww1
                         } in
                         let {
                           $j :: GHC.Prim.Int#
                                 -> GHC.Types.Int
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                             <join 2> {- Arity: 2, Strictness: <S,U><L,A> -}
                           = \ (x :: GHC.Prim.Int#)[OneShot]
                               (wild :: GHC.Types.Int)[OneShot] ->
                             case GHC.Prim.<# x 0# of lwild {
                               DEFAULT
                               -> case GHC.Prim.># x 1152921504606846975# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              (GHC.Prim.*# x 8#)
                                              s1
                                                `cast`
                                              (Nth:2
                                                   (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                    ->_R ((#,#)
                                                            <'GHC.Types.TupleRep '[]>_R
                                                            <'GHC.Types.LiftedRep>_R
                                                            <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                            (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <GHC.Prim.RealWorld>_N <GHC.Types.Double>_N))_R) ; Nth:2
                                                                                                                                                                        ((GHC.Prim.State#
                                                                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                                         ->_R ((#,#)
                                                                                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                                                                                    '[]>_R
                                                                                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                                                                                 (GHC.Prim.State#
                                                                                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                                                 <Data.Primitive.ByteArray.MutableByteArray
                                                                                                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                                                                                                       (GHC.ST.ST
                                                                                                                                                                                          GHC.Prim.RealWorld))>_R)_R)) of ds1 { (#,#) ipv ipv1 ->
                                       case {__pkg_ccall primitive-0.6.4.0 forall s.
                                                                           GHC.Prim.MutableByteArray#
                                                                             s
                                                                           -> GHC.Prim.Int#
                                                                           -> GHC.Prim.Word#
                                                                           -> GHC.Prim.Double#
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld #)}
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              ipv1
                                              0#
                                              (GHC.Prim.int2Word# x)
                                              0.0##
                                              ipv
                                                `cast`
                                              (GHC.Prim.State#
                                                 (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld)) GHC.Prim.RealWorld))_R of wild2 { Unit# ds9 ->
                                       let {
                                         exit :: GHC.Prim.Int#
                                                 -> GHC.Prim.Addr#
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.Unboxed.Base.Vector
                                                         GHC.Types.Double #)
                                           <join 2> {- Arity: 2, Strictness: <B,U><B,U>b -}
                                         = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                                             (file :: GHC.Prim.Addr#)[OneShot] ->
                                           case Statistics.Matrix.diag5 file ww3 ww1
                                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Unboxed.Base.Vector
                                                       GHC.Types.Double #)
                                           of {}
                                       } in
                                       let {
                                         exit1 :: GHC.Prim.Int#
                                                  -> GHC.Prim.Addr#
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.Unboxed.Base.Vector
                                                          GHC.Types.Double #)
                                           <join 2> {- Arity: 2, Strictness: <B,U><B,U>b -}
                                         = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                                             (file :: GHC.Prim.Addr#)[OneShot] ->
                                           case Statistics.Matrix.diag5 file ww3 ww1
                                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Vector.Unboxed.Base.Vector
                                                       GHC.Types.Double #)
                                           of {}
                                       } in
                                       let {
                                         exit2 :: GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.Unboxed.Base.Vector
                                                          GHC.Types.Double #)
                                           <join 1> {- Arity: 1, Strictness: <S,U> -}
                                         = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.unsafeFreezeByteArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  ipv1
                                                  w `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               (Nth:0
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (<GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld>_R
                                                                               ->_R ((#,#)
                                                                                       <'GHC.Types.TupleRep
                                                                                          '[]>_R
                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                       <GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld>_R
                                                                                       (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <GHC.Prim.RealWorld>_N <GHC.Types.Double>_N))_R)))))))_R of ds2 { (#,#) ipv2 ipv3 ->
                                           (# ipv2
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N))_R,
                                              (Data.Vector.Primitive.Vector
                                                 @ GHC.Types.Double
                                                 0#
                                                 x
                                                 ipv3)
                                                `cast`
                                              (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) }
                                       } in
                                       letrec {
                                         $wloop :: GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         Data.Vector.Unboxed.Base.Vector
                                                           GHC.Types.Double #)
                                           <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                       Inline: [2] -}
                                         = \ (ww3 :: GHC.Prim.Int#)
                                             (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case GHC.Prim.==# ww3 ww1 of lwild2 {
                                             DEFAULT
                                             -> case GHC.Prim.>=# ww3 0# of lwild3 {
                                                  DEFAULT -> exit ww3 Statistics.Matrix.diag4
                                                  1#
                                                  -> case GHC.Prim.<# ww3 ww1 of lwild4 {
                                                       DEFAULT -> exit1 ww3 Statistics.Matrix.diag4
                                                       1#
                                                       -> case GHC.Prim.indexDoubleArray#
                                                                 ww2
                                                                 (GHC.Prim.+#
                                                                    ww
                                                                    ww3) of wild1 { DEFAULT ->
                                                          case GHC.Prim.writeDoubleArray#
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 ipv1
                                                                 (GHC.Prim.+#
                                                                    (GHC.Prim.*# ww3 ww1)
                                                                    ww3)
                                                                 wild1
                                                                 w `cast`
                                                                 (GHC.Prim.State#
                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                          $wloop
                                                            (GHC.Prim.+# ww3 1#)
                                                            s'#
                                                              `cast`
                                                            (GHC.Prim.State#
                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                    <GHC.Prim.RealWorld>_N))_R } } } }
                                             1# -> exit2 w }
                                       } in
                                       $wloop 0# ds9 } }
                                    1#
                                    -> case Statistics.Matrix.diag3 @ GHC.Prim.RealWorld x
                                       ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                       of {} }
                               1#
                               -> case Statistics.Matrix.diag2 @ GHC.Prim.RealWorld x
                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                  of {} }
                         } in
                         case GHC.Prim.<=# 0# y1 of lwild {
                           DEFAULT -> $j 0# Statistics.Matrix.diag1
                           1# -> $j y1 (GHC.Types.I# y1) }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv ipv4 ipv5 ->
                 (# ww1, ww1,
                    nt
                      `cast`
                    (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) } }) -}
c59662c584353b7b22d382cb0d423b9e
  $wfoldlM_loop ::
    GHC.Types.SPEC
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Double]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
  {- Arity: 7, Strictness: <S,1*U><L,U><L,U><S,U><L,U><S,1*U><S,U>,
     Inline: [2] -}
161d67f2565a8f7f247b0c9335807aeb
  $wfoldlM_loop1 ::
    GHC.Types.SPEC
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Double]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
  {- Arity: 7, Strictness: <S,1*U><L,U><L,U><S,U><L,U><S,1*U><S,U>,
     Inline: [2] -}
21d7676ca88be604ae30054ff50c5eb8
  $wfromRows ::
    [Statistics.Matrix.Types.Vector]
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: [Statistics.Matrix.Types.Vector]) ->
                 case w of wild {
                   []
                   -> case Statistics.Matrix.fromRows8
                      ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                Statistics.Matrix.Types.Vector #)
                      of {}
                   : ipv ipv1
                   -> case GHC.Base.map
                             @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                             @ GHC.Types.Int
                             Statistics.Matrix.fromRows7
                               `cast`
                             (<Data.Vector.Unboxed.Base.Vector GHC.Types.Double>_R
                              ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R)
                             wild of wild1 {
                        []
                        -> case Statistics.Matrix.fromRows6
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                     Statistics.Matrix.Types.Vector #)
                           of {}
                        : nCol ns
                        -> let {
                             $j :: (# GHC.Prim.Int#, GHC.Prim.Int#,
                                      Statistics.Matrix.Types.Vector #)
                               <join 0>
                             = case nCol of wild2 { GHC.Types.I# x ->
                               case x of wild3 {
                                 DEFAULT
                                 -> case GHC.List.$wlenAcc
                                           @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                                           wild
                                           0# of ww2 { DEFAULT ->
                                    case GHC.Magic.runRW#
                                           @ ('GHC.Types.TupleRep
                                                '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                            let {
                                              $j1 :: GHC.Prim.Int#
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           Data.Vector.Unboxed.Base.Vector
                                                             GHC.Types.Double #)
                                                <join 1> {- Arity: 1, Strictness: <S,U> -}
                                              = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                                                case GHC.Prim.<# x1 0# of lwild {
                                                  DEFAULT
                                                  -> case GHC.Prim.>#
                                                            x1
                                                            1152921504606846975# of lwild1 {
                                                       DEFAULT
                                                       -> case GHC.Prim.newByteArray#
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 (GHC.Prim.*# x1 8#)
                                                                 s1
                                                                   `cast`
                                                                 (GHC.Prim.State#
                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              (Nth:0
                                                                                   (Nth:2
                                                                                        (<GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld>_R
                                                                                         ->_R ((#,#)
                                                                                                 <'GHC.Types.TupleRep
                                                                                                    '[]>_R
                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                 <GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld>_R
                                                                                                 (Data.Vector.Generic.Base.Mutable
                                                                                                    <Data.Vector.Unboxed.Base.Vector>_N
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)
                                                                                                    <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv2 ipv3 ->
                                                          let {
                                                            exit :: GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          Data.Vector.Unboxed.Base.Vector
                                                                            GHC.Types.Double #)
                                                              <join 2> {- Arity: 2,
                                                                          Strictness: <L,U><S,U> -}
                                                            = \ (ww :: GHC.Prim.Int#)[OneShot]
                                                                (w1 :: GHC.Prim.State#
                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                              case GHC.Prim.unsafeFreezeByteArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     ipv3
                                                                     w1
                                                                       `cast`
                                                                     (GHC.Prim.State#
                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                  (Nth:0
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (<GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld>_R
                                                                                                  ->_R ((#,#)
                                                                                                          <'GHC.Types.TupleRep
                                                                                                             '[]>_R
                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                          <GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld>_R
                                                                                                          (Data.Vector.Generic.Base.Mutable
                                                                                                             <Data.Vector.Unboxed.Base.Vector>_N
                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                       <GHC.Prim.RealWorld>_N))
                                                                                                             <GHC.Types.Double>_N)_R)_R)))))))_R of ds2 { (#,#) ipv4 ipv5 ->
                                                              (# ipv4
                                                                   `cast`
                                                                 (GHC.Prim.State#
                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                         <GHC.Prim.RealWorld>_N))_R,
                                                                 (Data.Vector.Primitive.Vector
                                                                    @ GHC.Types.Double
                                                                    0#
                                                                    ww
                                                                    ipv5)
                                                                   `cast`
                                                                 (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) }
                                                          } in
                                                          letrec {
                                                            $wfoldlM'_loop :: GHC.Types.SPEC
                                                                              -> GHC.Prim.Int#
                                                                              -> [Data.Vector.Unboxed.Base.Vector
                                                                                    GHC.Types.Double]
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    Data.Vector.Unboxed.Base.Vector
                                                                                      GHC.Types.Double #)
                                                              <join 4> {- Arity: 4,
                                                                          Strictness: <S,1*U><S,U><S,1*U><S,U>,
                                                                          Inline: [2] -}
                                                            = \ (w1 :: GHC.Types.SPEC)
                                                                (ww :: GHC.Prim.Int#)
                                                                (w2 :: [Data.Vector.Unboxed.Base.Vector
                                                                          GHC.Types.Double])
                                                                (w3 :: GHC.Prim.State#
                                                                         GHC.Prim.RealWorld) ->
                                                              case w1 of ds5 { DEFAULT ->
                                                              case w2 of wild4 {
                                                                [] -> exit ww w3
                                                                : v1 vs
                                                                -> case v1
                                                                          `cast`
                                                                        (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of wild5 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                                                   case GHC.Prim.copyByteArray#
                                                                          @ (Control.Monad.Primitive.PrimState
                                                                               (GHC.ST.ST
                                                                                  GHC.Prim.RealWorld))
                                                                          dt2
                                                                          (GHC.Prim.*# dt 8#)
                                                                          ipv3
                                                                          (GHC.Prim.*# ww 8#)
                                                                          (GHC.Prim.*# dt1 8#)
                                                                          w3
                                                                            `cast`
                                                                          (GHC.Prim.State#
                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                                   $wfoldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Prim.+# ww dt1)
                                                                     vs
                                                                     s'#
                                                                       `cast`
                                                                     (GHC.Prim.State#
                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                             <GHC.Prim.RealWorld>_N))_R } } } }
                                                          } in
                                                          $wfoldlM'_loop
                                                            GHC.Types.SPEC
                                                            0#
                                                            wild
                                                            ipv2
                                                              `cast`
                                                            (GHC.Prim.State#
                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                    (Nth:0
                                                                         (Nth:2
                                                                              (Nth:3
                                                                                   (<GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld>_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            <GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld>_R
                                                                                            (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                          (GHC.ST.ST
                                                                                                                                                             GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }
                                                       1#
                                                       -> case Statistics.Matrix.fromRows5 x1
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      GHC.Types.Double #)
                                                          of {} }
                                                  1#
                                                  -> case Statistics.Matrix.fromRows4 x1
                                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Vector.Unboxed.Base.Vector
                                                                 GHC.Types.Double #)
                                                     of {} }
                                            } in
                                            letrec {
                                              $wgo1 :: [Data.Vector.Unboxed.Base.Vector
                                                          GHC.Types.Double]
                                                       -> GHC.Prim.Int#
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Vector.Unboxed.Base.Vector
                                                               GHC.Types.Double #)
                                                <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>,
                                                            Inline: [2] -}
                                              = \ (w1 :: [Data.Vector.Unboxed.Base.Vector
                                                            GHC.Types.Double])
                                                  (ww :: GHC.Prim.Int#) ->
                                                case w1 of wild4 {
                                                  [] -> $j1 ww
                                                  : y ys
                                                  -> case y `cast`
                                                          (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of wild5 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                                     $wgo1 ys (GHC.Prim.+# ww dt1) } }
                                            } in
                                            $wgo1 wild 0#) of ds1 { (#,#) ipv2 ipv3 ->
                                    case ipv3
                                           `cast`
                                         (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv4 ipv5 ipv6 ->
                                    case GHC.Prim./=# (GHC.Prim.*# ww2 wild3) ipv5 of lwild {
                                      DEFAULT
                                      -> (# ww2, wild3,
                                            nt
                                              `cast`
                                            (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #)
                                      1#
                                      -> case Statistics.Matrix.fromRows3
                                         ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                                   Statistics.Matrix.Types.Vector #)
                                         of {} } } } }
                                 0#
                                 -> case Statistics.Matrix.fromRows2
                                    ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                              Statistics.Matrix.Types.Vector #)
                                    of {} } }
                           } in
                           letrec {
                             go :: [GHC.Types.Int]
                                   -> (# GHC.Prim.Int#, GHC.Prim.Int#,
                                         Statistics.Matrix.Types.Vector #)
                               <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds :: [GHC.Types.Int]) ->
                               case ds of wild2 {
                                 [] -> $j
                                 : y ys
                                 -> case y of wild3 { GHC.Types.I# x ->
                                    case nCol of wild4 { GHC.Types.I# y1 ->
                                    case GHC.Prim./=# x y1 of lwild {
                                      DEFAULT -> go ys
                                      1#
                                      -> case Statistics.Matrix.fromRows1
                                         ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                                   Statistics.Matrix.Types.Vector #)
                                         of {} } } } }
                           } in
                           go ns } }) -}
88f89e914543140e0758c6e6e7cd21f1
  $wgenerate ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 3, Strictness: <S,U><S,U><L,C(C1(U(U)))>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           n :: GHC.Prim.Int# = GHC.Prim.*# ww ww1
                         } in
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (x :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.<# x 0# of lwild {
                               DEFAULT
                               -> case GHC.Prim.># x 1152921504606846975# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              (GHC.Prim.*# x 8#)
                                              s1
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           (Nth:0
                                                                (Nth:2
                                                                     (<GHC.Prim.State#
                                                                         GHC.Prim.RealWorld>_R
                                                                      ->_R ((#,#)
                                                                              <'GHC.Types.TupleRep
                                                                                 '[]>_R
                                                                              <'GHC.Types.LiftedRep>_R
                                                                              <GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld>_R
                                                                              (Data.Vector.Generic.Base.Mutable
                                                                                 <Data.Vector.Unboxed.Base.Vector>_N
                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                      <GHC.Prim.RealWorld>_N)
                                                                                 <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                                       let {
                                         exit :: GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.Unboxed.Base.Vector
                                                         GHC.Types.Double #)
                                           <join 2> {- Arity: 2, Strictness: <L,U><S,U> -}
                                         = \ (ww2 :: GHC.Prim.Int#)[OneShot]
                                             (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.unsafeFreezeByteArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  ipv1
                                                  w1
                                                    `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               (Nth:0
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (<GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld>_R
                                                                               ->_R ((#,#)
                                                                                       <'GHC.Types.TupleRep
                                                                                          '[]>_R
                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                       <GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld>_R
                                                                                       (Data.Vector.Generic.Base.Mutable
                                                                                          <Data.Vector.Unboxed.Base.Vector>_N
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))
                                                                                          <GHC.Types.Double>_N)_R)_R)))))))_R of ds2 { (#,#) ipv2 ipv3 ->
                                           (# ipv2
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N))_R,
                                              (Data.Vector.Primitive.Vector
                                                 @ GHC.Types.Double
                                                 0#
                                                 ww2
                                                 ipv3)
                                                `cast`
                                              (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) }
                                       } in
                                       letrec {
                                         $wfoldlM'_loop :: GHC.Types.SPEC
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Unboxed.Base.Vector
                                                                   GHC.Types.Double #)
                                           <join 4> {- Arity: 4, Strictness: <S,1*U><S,U><S,U><S,U>,
                                                       Inline: [2] -}
                                         = \ (w1 :: GHC.Types.SPEC)
                                             (ww2 :: GHC.Prim.Int#)
                                             (ww3 :: GHC.Prim.Int#)
                                             (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case w1 of ds5 { DEFAULT ->
                                           case GHC.Prim.<# ww3 n of lwild2 {
                                             DEFAULT -> exit ww2 w2
                                             1#
                                             -> let {
                                                  ds :: (GHC.Types.Int, GHC.Types.Int)
                                                  = case ww1 of wild {
                                                      DEFAULT
                                                      -> case GHC.Prim.quotRemInt#
                                                                ww3
                                                                wild of ds2 { (#,#) ipv2 ipv3 ->
                                                         (GHC.Types.I# ipv2, GHC.Types.I# ipv3) }
                                                      -1#
                                                      -> case ww3 of wild1 {
                                                           DEFAULT
                                                           -> case GHC.Prim.quotRemInt#
                                                                     wild1
                                                                     -1# of ds2 { (#,#) ipv2 ipv3 ->
                                                              (GHC.Types.I# ipv2,
                                                               GHC.Types.I# ipv3) }
                                                           -9223372036854775808#
                                                           -> Statistics.Matrix.generate1 }
                                                      0#
                                                      -> case GHC.Real.divZeroError
                                                         ret_ty (GHC.Types.Int, GHC.Types.Int)
                                                         of {} }
                                                } in
                                                case w (case ds of wild { (,) r c -> r })
                                                       (case ds of wild { (,) r c ->
                                                        c }) of wild2 { GHC.Types.D# x# ->
                                                case GHC.Prim.writeDoubleArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       ipv1
                                                       ww2
                                                       x#
                                                       w2
                                                         `cast`
                                                       (GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                    <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                $wfoldlM'_loop
                                                  GHC.Types.SPEC
                                                  (GHC.Prim.+# ww2 1#)
                                                  (GHC.Prim.+# ww3 1#)
                                                  s'#
                                                    `cast`
                                                  (GHC.Prim.State#
                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                          <GHC.Prim.RealWorld>_N))_R } } } }
                                       } in
                                       $wfoldlM'_loop
                                         GHC.Types.SPEC
                                         0#
                                         0#
                                         ipv
                                           `cast`
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 (Nth:0
                                                      (Nth:2
                                                           (Nth:3
                                                                (<GHC.Prim.State#
                                                                    GHC.Prim.RealWorld>_R
                                                                 ->_R ((#,#)
                                                                         <'GHC.Types.TupleRep '[]>_R
                                                                         <'GHC.Types.LiftedRep>_R
                                                                         <GHC.Prim.State#
                                                                            GHC.Prim.RealWorld>_R
                                                                         (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                       (GHC.ST.ST
                                                                                                                                          GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }
                                    1#
                                    -> case Statistics.Matrix.fromRows5 x
                                       ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                       of {} }
                               1#
                               -> case Statistics.Matrix.fromRows4 x
                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                  of {} }
                         } in
                         case GHC.Prim.<=# n 0# of lwild {
                           DEFAULT -> $j n 1# -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv ipv4 ipv5 ->
                 (# ww, ww1,
                    nt
                      `cast`
                    (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) } }) -}
fe711a18800b0e98db5a050d0138c635
  $wgenerateSym ::
    GHC.Prim.Int#
    -> (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double)
    -> Statistics.Matrix.Types.Matrix
  {- Arity: 2, Strictness: <S,U><L,C(C1(U(U)))>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Statistics.Matrix.Types.Matrix #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case Statistics.Matrix.Mutable.$wunsafeNew
                                @ GHC.Prim.RealWorld
                                ww
                                ww
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         let {
                           exit :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Statistics.Matrix.Types.Matrix #)
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             Statistics.Matrix.Mutable.unsafeFreeze1
                               @ GHC.Prim.RealWorld
                               ipv1
                               w1
                         } in
                         letrec {
                           $wloop :: GHC.Prim.Int#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Statistics.Matrix.Types.Matrix #)
                             <join 2> {- Arity: 2, Strictness: <S,U><S,U>, Inline: [2] -}
                           = \ (ww1 :: GHC.Prim.Int#)
                               (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                             case GHC.Prim.==# ww1 ww of lwild {
                               DEFAULT
                               -> case ipv1 of wild { Statistics.Matrix.Types.MMatrix dt dt1 mv ->
                                  case mv
                                         `cast`
                                       (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N)) ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld)>_N) of wild3 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                                  let {
                                    wild1 :: GHC.Types.Int = GHC.Types.I# ww1
                                  } in
                                  case w wild1 wild1 of wild4 { GHC.Types.D# x# ->
                                  case GHC.Prim.writeDoubleArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         dt4
                                         (GHC.Prim.+# dt2 (GHC.Prim.+# (GHC.Prim.*# ww1 dt1) ww1))
                                         x#
                                         w1
                                           `cast`
                                         (Nth:2
                                              ((GHC.Prim.State#
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                            <GHC.Prim.RealWorld>_N)))_R
                                               ->_R ((#,#)
                                                       <'GHC.Types.TupleRep '[]>_R
                                                       <'GHC.Types.LiftedRep>_R
                                                       (GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                       <()>_R)_R)) of s'# { DEFAULT ->
                                  let {
                                    exit1 :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Statistics.Matrix.Types.Matrix #)
                                      <join 1> {- Arity: 1, Strictness: <S,U> -}
                                    = \ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      $wloop (GHC.Prim.+# ww1 1#) w2
                                  } in
                                  letrec {
                                    $wloop1 :: GHC.Prim.Int#
                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Statistics.Matrix.Types.Matrix #)
                                      <join 2> {- Arity: 2, Strictness: <S,U><S,U>, Inline: [2] -}
                                    = \ (ww2 :: GHC.Prim.Int#)
                                        (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case GHC.Prim.==# ww2 ww of lwild1 {
                                        DEFAULT
                                        -> case w wild1
                                                  (GHC.Types.I# ww2) of wild2 { GHC.Types.D# x#1 ->
                                           case GHC.Prim.writeDoubleArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  dt4
                                                  (GHC.Prim.+#
                                                     dt2
                                                     (GHC.Prim.+# (GHC.Prim.*# ww1 dt1) ww2))
                                                  x#1
                                                  w2
                                                    `cast`
                                                  (Nth:2
                                                       ((GHC.Prim.State#
                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                (GHC.Prim.State#
                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                <()>_R)_R)) of s'#1 { DEFAULT ->
                                           case GHC.Prim.writeDoubleArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  dt4
                                                  (GHC.Prim.+#
                                                     dt2
                                                     (GHC.Prim.+# (GHC.Prim.*# ww2 dt1) ww1))
                                                  x#1
                                                  s'#1 of s'#2 { DEFAULT ->
                                           $wloop1
                                             (GHC.Prim.+# ww2 1#)
                                             s'#2
                                               `cast`
                                             (Nth:2
                                                  (Nth:3
                                                       ((GHC.Prim.State#
                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                <GHC.Prim.RealWorld>_N))_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                (GHC.Prim.State#
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                <()>_R)_R))) } } }
                                        1# -> exit1 w2 }
                                  } in
                                  $wloop1
                                    (GHC.Prim.+# ww1 1#)
                                    s'#
                                      `cast`
                                    (Nth:2
                                         (Nth:3
                                              ((GHC.Prim.State#
                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                       <GHC.Prim.RealWorld>_N))_R
                                               ->_R ((#,#)
                                                       <'GHC.Types.TupleRep '[]>_R
                                                       <'GHC.Types.LiftedRep>_R
                                                       (GHC.Prim.State#
                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <GHC.Prim.RealWorld>_N))_R
                                                       <()>_R)_R))) } } } }
                               1# -> exit w1 }
                         } in
                         $wloop 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6b6c3a5b2b58376e90dcfb4ea31bbc3f
  $whasNaN ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> Data.Vector.Fusion.Util.Id GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.ByteArray#) ->
                 letrec {
                   $wor_loop :: GHC.Types.SPEC
                                -> GHC.Prim.Int# -> Data.Vector.Fusion.Util.Id GHC.Types.Bool
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [2] -}
                   = \ (w :: GHC.Types.SPEC) (ww3 :: GHC.Prim.Int#) ->
                     case w of ds5 { DEFAULT ->
                     case GHC.Prim.>=# ww3 ww1 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexDoubleArray#
                                 ww2
                                 (GHC.Prim.+# ww ww3) of wild2 { DEFAULT ->
                          case {__pkg_ccall base-4.12.0.0 GHC.Prim.Double#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                 wild2
                                 GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                          case ds3 of wild1 {
                            DEFAULT
                            -> GHC.Types.True
                                 `cast`
                               (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                            0# -> $wor_loop GHC.Types.SPEC (GHC.Prim.+# ww3 1#) } } }
                       1#
                       -> GHC.Types.False
                            `cast`
                          (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)) } }
                 } in
                 $wor_loop GHC.Types.SPEC 0#) -}
a72d55ddad35465fb744f3c747ddce4c
  $wident ::
    GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (x :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.<# x 0# of lwild {
                               DEFAULT
                               -> case GHC.Prim.># x 1152921504606846975# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              (GHC.Prim.*# x 8#)
                                              s1
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           (Nth:0
                                                                (Nth:2
                                                                     (<GHC.Prim.State#
                                                                         GHC.Prim.RealWorld>_R
                                                                      ->_R ((#,#)
                                                                              <'GHC.Types.TupleRep
                                                                                 '[]>_R
                                                                              <'GHC.Types.LiftedRep>_R
                                                                              <GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld>_R
                                                                              (Data.Vector.Generic.Base.Mutable
                                                                                 <Data.Vector.Unboxed.Base.Vector>_N
                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                      <GHC.Prim.RealWorld>_N)
                                                                                 <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                                       let {
                                         exit :: GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.Unboxed.Base.Vector
                                                         GHC.Types.Double #)
                                           <join 2> {- Arity: 2, Strictness: <L,U><S,U> -}
                                         = \ (ww1 :: GHC.Prim.Int#)[OneShot]
                                             (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.unsafeFreezeByteArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  ipv1
                                                  w `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               (Nth:0
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (<GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld>_R
                                                                               ->_R ((#,#)
                                                                                       <'GHC.Types.TupleRep
                                                                                          '[]>_R
                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                       <GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld>_R
                                                                                       (Data.Vector.Generic.Base.Mutable
                                                                                          <Data.Vector.Unboxed.Base.Vector>_N
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))
                                                                                          <GHC.Types.Double>_N)_R)_R)))))))_R of ds2 { (#,#) ipv2 ipv3 ->
                                           (# ipv2
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N))_R,
                                              (Data.Vector.Primitive.Vector
                                                 @ GHC.Types.Double
                                                 0#
                                                 ww1
                                                 ipv3)
                                                `cast`
                                              (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) }
                                       } in
                                       letrec {
                                         $wfoldlM'_loop :: GHC.Types.SPEC
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Types.Bool
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Unboxed.Base.Vector
                                                                   GHC.Types.Double #)
                                           <join 4> {- Arity: 4,
                                                       Strictness: <S,1*U><S,U><S,1*U><S,U>,
                                                       Inline: [2] -}
                                         = \ (w :: GHC.Types.SPEC)
                                             (ww1 :: GHC.Prim.Int#)
                                             (w1 :: GHC.Types.Bool)
                                             (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case w of ds5 { DEFAULT ->
                                           case w1 of wild {
                                             GHC.Types.False -> exit ww1 w2
                                             GHC.Types.True
                                             -> case {__pkg_ccall primitive-0.6.4.0 forall s.
                                                                                    GHC.Prim.MutableByteArray#
                                                                                      s
                                                                                    -> GHC.Prim.Int#
                                                                                    -> GHC.Prim.Word#
                                                                                    -> GHC.Prim.Double#
                                                                                    -> GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld
                                                                                    -> (# GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld #)}
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       ipv1
                                                       ww1
                                                       (GHC.Prim.int2Word# x)
                                                       1.0##
                                                       w2 of wild2 { Unit# ds9 ->
                                                $wfoldlM'_loop
                                                  GHC.Types.SPEC
                                                  (GHC.Prim.+# ww1 x)
                                                  GHC.Types.False
                                                  ds9 } } }
                                       } in
                                       $wfoldlM'_loop
                                         GHC.Types.SPEC
                                         0#
                                         GHC.Types.True
                                         ipv
                                           `cast`
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 (Nth:0
                                                      (Nth:2
                                                           (Nth:3
                                                                (<GHC.Prim.State#
                                                                    GHC.Prim.RealWorld>_R
                                                                 ->_R ((#,#)
                                                                         <'GHC.Types.TupleRep '[]>_R
                                                                         <'GHC.Types.LiftedRep>_R
                                                                         <GHC.Prim.State#
                                                                            GHC.Prim.RealWorld>_R
                                                                         (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                       (GHC.ST.ST
                                                                                                                                          GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }
                                    1#
                                    -> case Statistics.Matrix.fromRows5 x
                                       ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                       of {} }
                               1#
                               -> case Statistics.Matrix.fromRows4 x
                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                  of {} }
                         } in
                         case GHC.Prim.<=# ww 0# of lwild {
                           DEFAULT -> $j ww 1# -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww1 { Data.Vector.Primitive.Vector ww2 ww3 ww4 ->
                 Statistics.Matrix.$wdiag ww2 ww3 ww4 } }) -}
c7b129a2f2c674963aa5336425e4af86
  $wlvl ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> Statistics.Matrix.Types.Vector
  {- Arity: 2, Strictness: <B,U><B,U>x, Inline: [2] -}
5f5d539fd7903ad7de1e51e6eb7c1b80
  $wmap ::
    (GHC.Types.Double -> GHC.Types.Double)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 6, Strictness: <L,C(U(U))><L,U><L,U><L,U><S,U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Double -> GHC.Types.Double)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.ByteArray#) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.<# ww3 0# of lwild {
                           DEFAULT
                           -> case GHC.Prim.># ww3 1152921504606846975# of lwild1 {
                                DEFAULT
                                -> case GHC.Prim.newByteArray#
                                          @ (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                          (GHC.Prim.*# ww3 8#)
                                          s1
                                            `cast`
                                          (GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                       (Nth:0
                                                            (Nth:2
                                                                 (<GHC.Prim.State#
                                                                     GHC.Prim.RealWorld>_R
                                                                  ->_R ((#,#)
                                                                          <'GHC.Types.TupleRep
                                                                             '[]>_R
                                                                          <'GHC.Types.LiftedRep>_R
                                                                          <GHC.Prim.State#
                                                                             GHC.Prim.RealWorld>_R
                                                                          (Data.Vector.Generic.Base.Mutable
                                                                             <Data.Vector.Unboxed.Base.Vector>_N
                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                  <GHC.Prim.RealWorld>_N)
                                                                             <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                                   let {
                                     exit :: GHC.Prim.Int#
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Vector.Unboxed.Base.Vector
                                                     GHC.Types.Double #)
                                       <join 2> {- Arity: 2, Strictness: <L,U><S,U> -}
                                     = \ (ww5 :: GHC.Prim.Int#)[OneShot]
                                         (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case GHC.Prim.unsafeFreezeByteArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              ipv1
                                              w1
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           (Nth:0
                                                                (Nth:2
                                                                     (Nth:3
                                                                          (<GHC.Prim.State#
                                                                              GHC.Prim.RealWorld>_R
                                                                           ->_R ((#,#)
                                                                                   <'GHC.Types.TupleRep
                                                                                      '[]>_R
                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                   <GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld>_R
                                                                                   (Data.Vector.Generic.Base.Mutable
                                                                                      <Data.Vector.Unboxed.Base.Vector>_N
                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <GHC.Prim.RealWorld>_N))
                                                                                      <GHC.Types.Double>_N)_R)_R)))))))_R of ds2 { (#,#) ipv2 ipv3 ->
                                       (# ipv2
                                            `cast`
                                          (GHC.Prim.State#
                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N))_R,
                                          (Data.Vector.Primitive.Vector
                                             @ GHC.Types.Double
                                             0#
                                             ww5
                                             ipv3)
                                            `cast`
                                          (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) }
                                   } in
                                   letrec {
                                     $wfoldlM'_loop :: GHC.Types.SPEC
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Vector.Unboxed.Base.Vector
                                                               GHC.Types.Double #)
                                       <join 4> {- Arity: 4, Strictness: <S,1*U><S,U><S,U><S,U>,
                                                   Inline: [2] -}
                                     = \ (w1 :: GHC.Types.SPEC)
                                         (ww5 :: GHC.Prim.Int#)
                                         (ww6 :: GHC.Prim.Int#)
                                         (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w1 of ds5 { DEFAULT ->
                                       case GHC.Prim.>=# ww6 ww3 of lwild2 {
                                         DEFAULT
                                         -> case GHC.Prim.indexDoubleArray#
                                                   ww4
                                                   (GHC.Prim.+# ww2 ww6) of wild2 { DEFAULT ->
                                            case w (GHC.Types.D#
                                                      wild2) of wild1 { GHC.Types.D# x# ->
                                            case GHC.Prim.writeDoubleArray#
                                                   @ (Control.Monad.Primitive.PrimState
                                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                                   ipv1
                                                   ww5
                                                   x#
                                                   w2
                                                     `cast`
                                                   (GHC.Prim.State#
                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                            $wfoldlM'_loop
                                              GHC.Types.SPEC
                                              (GHC.Prim.+# ww5 1#)
                                              (GHC.Prim.+# ww6 1#)
                                              s'#
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N))_R } } }
                                         1# -> exit ww5 w2 } }
                                   } in
                                   $wfoldlM'_loop
                                     GHC.Types.SPEC
                                     0#
                                     0#
                                     ipv
                                       `cast`
                                     (GHC.Prim.State#
                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             (Nth:0
                                                  (Nth:2
                                                       (Nth:3
                                                            (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                             ->_R ((#,#)
                                                                     <'GHC.Types.TupleRep '[]>_R
                                                                     <'GHC.Types.LiftedRep>_R
                                                                     <GHC.Prim.State#
                                                                        GHC.Prim.RealWorld>_R
                                                                     (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                   (GHC.ST.ST
                                                                                                                                      GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }
                                1#
                                -> case Statistics.Matrix.fromRows5 ww3
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                   of {} }
                           1#
                           -> case Statistics.Matrix.fromRows4 ww3
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                              of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv ipv4 ipv5 ->
                 (# ww, ww1,
                    nt
                      `cast`
                    (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) } }) -}
98445ff92999b95b3e8d4dc4f40955ab
  $wmultiply ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 10,
     Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U>,
     Inline: [2] -}
f513a9f45a8f74486dac3482f74bcc82
  $wmultiplyV ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Double
  {- Arity: 8, Strictness: <S,U><S,U><L,U><L,U><L,U><L,U><S,U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.ByteArray#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.ByteArray#) ->
                 case GHC.Prim.==# ww1 ww6 of lwild {
                   DEFAULT -> Statistics.Matrix.$wlvl ww1 ww6
                   1#
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              let {
                                $j :: GHC.Prim.Int#
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                  <join 1> {- Arity: 1, Strictness: <S,U> -}
                                = \ (x :: GHC.Prim.Int#)[OneShot] ->
                                  case GHC.Prim.<# x 0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.># x 1152921504606846975# of lwild2 {
                                         DEFAULT
                                         -> case GHC.Prim.newByteArray#
                                                   @ (Control.Monad.Primitive.PrimState
                                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                                   (GHC.Prim.*# x 8#)
                                                   s1
                                                     `cast`
                                                   (GHC.Prim.State#
                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                (Nth:0
                                                                     (Nth:2
                                                                          (<GHC.Prim.State#
                                                                              GHC.Prim.RealWorld>_R
                                                                           ->_R ((#,#)
                                                                                   <'GHC.Types.TupleRep
                                                                                      '[]>_R
                                                                                   <'GHC.Types.LiftedRep>_R
                                                                                   <GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld>_R
                                                                                   (Data.Vector.Generic.Base.Mutable
                                                                                      <Data.Vector.Unboxed.Base.Vector>_N
                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                           <GHC.Prim.RealWorld>_N)
                                                                                      <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                                            let {
                                              exit :: GHC.Prim.Int#
                                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            Data.Vector.Unboxed.Base.Vector
                                                              GHC.Types.Double #)
                                                <join 2> {- Arity: 2, Strictness: <L,U><S,U> -}
                                              = \ (ww8 :: GHC.Prim.Int#)[OneShot]
                                                  (w :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                                case GHC.Prim.unsafeFreezeByteArray#
                                                       @ (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                       ipv1
                                                       w `cast`
                                                       (GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                    (Nth:0
                                                                         (Nth:2
                                                                              (Nth:3
                                                                                   (<GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld>_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            <GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld>_R
                                                                                            (Data.Vector.Generic.Base.Mutable
                                                                                               <Data.Vector.Unboxed.Base.Vector>_N
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))
                                                                                               <GHC.Types.Double>_N)_R)_R)))))))_R of ds2 { (#,#) ipv2 ipv3 ->
                                                (# ipv2
                                                     `cast`
                                                   (GHC.Prim.State#
                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N))_R,
                                                   (Data.Vector.Primitive.Vector
                                                      @ GHC.Types.Double
                                                      0#
                                                      ww8
                                                      ipv3)
                                                     `cast`
                                                   (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) }
                                            } in
                                            let {
                                              exit1 :: GHC.Prim.Int#
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Vector.Unboxed.Base.Vector
                                                               GHC.Types.Double #)
                                                <join 1> {- Arity: 1, Strictness: <B,U>b -}
                                              = \ (i :: GHC.Prim.Int#)[OneShot] ->
                                                case Statistics.Matrix.multiplyV1 ww3 i ww1
                                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          Data.Vector.Unboxed.Base.Vector
                                                            GHC.Types.Double #)
                                                of {}
                                            } in
                                            letrec {
                                              $wfoldlM'_loop :: GHC.Types.SPEC
                                                                -> GHC.Prim.Int#
                                                                -> GHC.Prim.Int#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      Data.Vector.Unboxed.Base.Vector
                                                                        GHC.Types.Double #)
                                                <join 4> {- Arity: 4,
                                                            Strictness: <S,1*U><S,U><S,U><S,U>,
                                                            Inline: [2] -}
                                              = \ (w :: GHC.Types.SPEC)
                                                  (ww8 :: GHC.Prim.Int#)
                                                  (ww9 :: GHC.Prim.Int#)
                                                  (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                case w of ds5 { DEFAULT ->
                                                case GHC.Prim.<# ww9 ww of lwild3 {
                                                  DEFAULT -> exit ww8 w1
                                                  1#
                                                  -> let {
                                                       i :: GHC.Prim.Int# = GHC.Prim.*# ww1 ww9
                                                     } in
                                                     case GHC.Prim.>=# i 0# of lwild4 {
                                                       DEFAULT -> exit1 i
                                                       1#
                                                       -> case GHC.Prim.>=# ww1 0# of lwild5 {
                                                            DEFAULT -> exit1 i
                                                            1#
                                                            -> case GHC.Prim.<=#
                                                                      (GHC.Prim.+# i ww1)
                                                                      ww3 of lwild6 {
                                                                 DEFAULT -> exit1 i
                                                                 1#
                                                                 -> let {
                                                                      ipv2 :: GHC.Prim.Int#
                                                                      = GHC.Prim.+# ww2 i
                                                                    } in
                                                                    let {
                                                                      $j1 :: GHC.Prim.Double#
                                                                             -> GHC.Prim.Double#
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Vector.Unboxed.Base.Vector
                                                                                     GHC.Types.Double #)
                                                                        <join 2> {- Arity: 2,
                                                                                    Strictness: <S,U><S,U> -}
                                                                      = \ (dt :: GHC.Prim.Double#)[OneShot]
                                                                          (dt1 :: GHC.Prim.Double#)[OneShot] ->
                                                                        case GHC.Prim.writeDoubleArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv1
                                                                               ww8
                                                                               (GHC.Prim.+## dt dt1)
                                                                               w1
                                                                                 `cast`
                                                                               (GHC.Prim.State#
                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                            <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                                        $wfoldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Prim.+# ww8 1#)
                                                                          (GHC.Prim.+# ww9 1#)
                                                                          s'#
                                                                            `cast`
                                                                          (GHC.Prim.State#
                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                  <GHC.Prim.RealWorld>_N))_R }
                                                                    } in
                                                                    letrec {
                                                                      $wfoldlM'_loop1 :: GHC.Types.SPEC
                                                                                         -> GHC.Prim.Double#
                                                                                         -> GHC.Prim.Double#
                                                                                         -> GHC.Types.Int
                                                                                         -> GHC.Types.Int
                                                                                         -> GHC.Maybe.Maybe
                                                                                              GHC.Types.Double
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               Data.Vector.Unboxed.Base.Vector
                                                                                                 GHC.Types.Double #)
                                                                        <join 6> {- Arity: 6,
                                                                                    Strictness: <S,1*U><S,U><S,U><L,1*U(U)><L,1*U(U)><S,1*U>,
                                                                                    Inline: [2] -}
                                                                      = \ (w2 :: GHC.Types.SPEC)
                                                                          (ww10 :: GHC.Prim.Double#)
                                                                          (ww11 :: GHC.Prim.Double#)
                                                                          (ww12 :: GHC.Types.Int)
                                                                          (ww13 :: GHC.Types.Int)
                                                                          (ww14 :: GHC.Maybe.Maybe
                                                                                     GHC.Types.Double) ->
                                                                        case w2 of ds2 { DEFAULT ->
                                                                        case ww14 of wild5 {
                                                                          GHC.Maybe.Nothing
                                                                          -> case ww12 of wild { GHC.Types.I# x1 ->
                                                                             case GHC.Prim.>=#
                                                                                    x1
                                                                                    ww6 of lwild7 {
                                                                               DEFAULT
                                                                               -> case GHC.Prim.indexDoubleArray#
                                                                                         ww7
                                                                                         (GHC.Prim.+#
                                                                                            ww5
                                                                                            x1) of wild2 { DEFAULT ->
                                                                                  $wfoldlM'_loop1
                                                                                    GHC.Types.SPEC
                                                                                    ww10
                                                                                    ww11
                                                                                    (GHC.Types.I#
                                                                                       (GHC.Prim.+#
                                                                                          x1
                                                                                          1#))
                                                                                    ww13
                                                                                    (GHC.Maybe.Just
                                                                                       @ GHC.Types.Double
                                                                                       (GHC.Types.D#
                                                                                          wild2)) }
                                                                               1#
                                                                               -> $j1 ww10 ww11 } }
                                                                          GHC.Maybe.Just x1
                                                                          -> case ww13 of wild { GHC.Types.I# x2 ->
                                                                             case GHC.Prim.>=#
                                                                                    x2
                                                                                    ww1 of lwild7 {
                                                                               DEFAULT
                                                                               -> case GHC.Prim.indexDoubleArray#
                                                                                         ww4
                                                                                         (GHC.Prim.+#
                                                                                            ipv2
                                                                                            x2) of wild2 { DEFAULT ->
                                                                                  case x1 of wild1 { GHC.Types.D# x3 ->
                                                                                  let {
                                                                                    y :: GHC.Prim.Double#
                                                                                    = GHC.Prim.*##
                                                                                        x3
                                                                                        wild2
                                                                                  } in
                                                                                  let {
                                                                                    dt2 :: GHC.Prim.Double#
                                                                                    = GHC.Prim.+##
                                                                                        ww10
                                                                                        y
                                                                                  } in
                                                                                  case GHC.Prim.>=##
                                                                                         (GHC.Prim.fabsDouble#
                                                                                            ww10)
                                                                                         (GHC.Prim.fabsDouble#
                                                                                            y) of lwild8 {
                                                                                    DEFAULT
                                                                                    -> $wfoldlM'_loop1
                                                                                         GHC.Types.SPEC
                                                                                         dt2
                                                                                         (GHC.Prim.+##
                                                                                            ww11
                                                                                            (GHC.Prim.+##
                                                                                               (GHC.Prim.-##
                                                                                                  y
                                                                                                  dt2)
                                                                                               ww10))
                                                                                         ww12
                                                                                         (GHC.Types.I#
                                                                                            (GHC.Prim.+#
                                                                                               x2
                                                                                               1#))
                                                                                         (GHC.Maybe.Nothing
                                                                                            @ GHC.Types.Double)
                                                                                    1#
                                                                                    -> $wfoldlM'_loop1
                                                                                         GHC.Types.SPEC
                                                                                         dt2
                                                                                         (GHC.Prim.+##
                                                                                            ww11
                                                                                            (GHC.Prim.+##
                                                                                               (GHC.Prim.-##
                                                                                                  ww10
                                                                                                  dt2)
                                                                                               y))
                                                                                         ww12
                                                                                         (GHC.Types.I#
                                                                                            (GHC.Prim.+#
                                                                                               x2
                                                                                               1#))
                                                                                         (GHC.Maybe.Nothing
                                                                                            @ GHC.Types.Double) } } }
                                                                               1#
                                                                               -> $j1
                                                                                    ww10
                                                                                    ww11 } } } }
                                                                    } in
                                                                    $wfoldlM'_loop1
                                                                      GHC.Types.SPEC
                                                                      0.0##
                                                                      0.0##
                                                                      Statistics.Matrix.diag1
                                                                      Statistics.Matrix.diag1
                                                                      (GHC.Maybe.Nothing
                                                                         @ GHC.Types.Double) } } } } }
                                            } in
                                            $wfoldlM'_loop
                                              GHC.Types.SPEC
                                              0#
                                              0#
                                              ipv
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      (Nth:0
                                                           (Nth:2
                                                                (Nth:3
                                                                     (<GHC.Prim.State#
                                                                         GHC.Prim.RealWorld>_R
                                                                      ->_R ((#,#)
                                                                              <'GHC.Types.TupleRep
                                                                                 '[]>_R
                                                                              <'GHC.Types.LiftedRep>_R
                                                                              <GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld>_R
                                                                              (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }
                                         1#
                                         -> case Statistics.Matrix.fromRows5 x
                                            ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                      Data.Vector.Unboxed.Base.Vector
                                                        GHC.Types.Double #)
                                            of {} }
                                    1#
                                    -> case Statistics.Matrix.fromRows4 x
                                       ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                       of {} }
                              } in
                              case GHC.Prim.<=# ww 0# of lwild1 {
                                DEFAULT -> $j ww 1# -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      ipv2 } }) -}
581bc972e8163308853ddf3c9f2f17d5
  $wnorm ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.ByteArray# -> GHC.Prim.Double#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.ByteArray#) ->
                 letrec {
                   $wfoldlM'_loop :: GHC.Types.SPEC
                                     -> GHC.Prim.Double#
                                     -> GHC.Prim.Double#
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.Double#
                     <join 4> {- Arity: 4, Strictness: <S,1*U><S,U><S,U><S,U>,
                                 Inline: [2] -}
                   = \ (w :: GHC.Types.SPEC)
                       (ww3 :: GHC.Prim.Double#)
                       (ww4 :: GHC.Prim.Double#)
                       (ww5 :: GHC.Prim.Int#) ->
                     case w of ds5 { DEFAULT ->
                     case GHC.Prim.>=# ww5 ww1 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexDoubleArray#
                                 ww2
                                 (GHC.Prim.+# ww ww5) of wild2 { DEFAULT ->
                          let {
                            y :: GHC.Prim.Double# = GHC.Prim.*## wild2 wild2
                          } in
                          let {
                            dt2 :: GHC.Prim.Double# = GHC.Prim.+## ww3 y
                          } in
                          case GHC.Prim.>=##
                                 (GHC.Prim.fabsDouble# ww3)
                                 (GHC.Prim.fabsDouble# y) of lwild1 {
                            DEFAULT
                            -> $wfoldlM'_loop
                                 GHC.Types.SPEC
                                 dt2
                                 (GHC.Prim.+## ww4 (GHC.Prim.+## (GHC.Prim.-## y dt2) ww3))
                                 (GHC.Prim.+# ww5 1#)
                            1#
                            -> $wfoldlM'_loop
                                 GHC.Types.SPEC
                                 dt2
                                 (GHC.Prim.+## ww4 (GHC.Prim.+## (GHC.Prim.-## ww3 dt2) y))
                                 (GHC.Prim.+# ww5 1#) } }
                       1# -> GHC.Prim.sqrtDouble# (GHC.Prim.+## ww3 ww4) } }
                 } in
                 $wfoldlM'_loop GHC.Types.SPEC 0.0## 0.0## 0#) -}
aa20af4a99b92d10c68f447dc7460cfc
  $wpower ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Statistics.Matrix.Types.Vector
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 4, Strictness: <S,U><S,U><S,1*U(U,U,U)><S,1*U>,
     Inline: [2] -}
d7e193eb28f6728760beef0b97fcb9fc
  $wrow ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.ByteArray# #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#)
                   (ww4 :: GHC.Prim.Int#) ->
                 let {
                   i :: GHC.Prim.Int# = GHC.Prim.*# ww ww4
                 } in
                 case GHC.Prim.>=# i 0# of lwild {
                   DEFAULT
                   -> case Statistics.Matrix.multiplyV1 ww2 i ww
                      ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.ByteArray# #)
                      of {}
                   1#
                   -> case GHC.Prim.>=# ww 0# of lwild1 {
                        DEFAULT
                        -> case Statistics.Matrix.multiplyV1 ww2 i ww
                           ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.ByteArray# #)
                           of {}
                        1#
                        -> case GHC.Prim.<=# (GHC.Prim.+# i ww) ww2 of lwild2 {
                             DEFAULT
                             -> case Statistics.Matrix.multiplyV1 ww2 i ww
                                ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.ByteArray# #)
                                of {}
                             1# -> (# GHC.Prim.+# ww1 i, ww, ww3 #) } } }) -}
4ea061c7062f1aaa310886acbb4cb548
  $wtoList ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.ByteArray# -> [GHC.Types.Double]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.ByteArray#) ->
                 letrec {
                   $wgo1 :: GHC.Prim.Int# -> [GHC.Types.Double]
                     {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                   = \ (ww3 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww3 ww1 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexDoubleArray#
                                 ww2
                                 (GHC.Prim.+# ww ww3) of wild2 { DEFAULT ->
                          GHC.Types.:
                            @ GHC.Types.Double
                            (GHC.Types.D# wild2)
                            ($wgo1 (GHC.Prim.+# ww3 1#)) }
                       1# -> GHC.Types.[] @ GHC.Types.Double }
                 } in
                 $wgo1 0#) -}
5193dfd93d3636897d5e72131079ace8
  $wtoRowLists ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> [[GHC.Types.Double]]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><S,U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#) ->
                 letrec {
                   chunks :: [GHC.Types.Double] -> [[GHC.Types.Double]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Double]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Double]
                       : ipv ipv1
                       -> case GHC.Prim.<=# ww 0# of lwild {
                            DEFAULT
                            -> case ww of ds1 {
                                 DEFAULT
                                 -> let {
                                      ds2 :: ([GHC.Types.Double], [GHC.Types.Double])
                                      = case GHC.List.splitAt_$s$wsplitAt'
                                               @ GHC.Types.Double
                                               ipv1
                                               (GHC.Prim.-# ds1 1#) of ww4 { (#,#) ww5 ww6 ->
                                        (ww5, ww6) }
                                    } in
                                    GHC.Types.:
                                      @ [GHC.Types.Double]
                                      (GHC.Types.:
                                         @ GHC.Types.Double
                                         ipv
                                         (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                      (case ds2 of wild2 { (,) xs' xs'' -> chunks xs'' })
                                 1#
                                 -> GHC.Types.:
                                      @ [GHC.Types.Double]
                                      (GHC.Types.:
                                         @ GHC.Types.Double
                                         ipv
                                         (GHC.Types.[] @ GHC.Types.Double))
                                      (chunks ipv1) }
                            1#
                            -> GHC.Types.:
                                 @ [GHC.Types.Double]
                                 (GHC.Types.[] @ GHC.Types.Double)
                                 (chunks wild) } }
                 } in
                 letrec {
                   $wgo1 :: GHC.Prim.Int# -> [GHC.Types.Double]
                     {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                   = \ (ww4 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww4 ww2 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexDoubleArray#
                                 ww3
                                 (GHC.Prim.+# ww1 ww4) of wild2 { DEFAULT ->
                          GHC.Types.:
                            @ GHC.Types.Double
                            (GHC.Types.D# wild2)
                            ($wgo1 (GHC.Prim.+# ww4 1#)) }
                       1# -> GHC.Types.[] @ GHC.Types.Double }
                 } in
                 chunks ($wgo1 0#)) -}
d50c3c148b5d5b71c3ecde77c8ef2278
  $wtoRows ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> [Statistics.Matrix.Types.Vector]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><S,U><S,1*U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#) ->
                 let {
                   n' :: GHC.Types.Int
                   = case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT -> GHC.Types.I# ww 1# -> Statistics.Matrix.diag1 }
                 } in
                 letrec {
                   $wchunks :: GHC.Prim.Int#
                               -> GHC.Prim.Int#
                               -> GHC.Prim.ByteArray#
                               -> [Data.Vector.Unboxed.Base.Vector GHC.Types.Double]
                     {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [2] -}
                   = \ (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (ww6 :: GHC.Prim.ByteArray#) ->
                     case ww5 of wild3 {
                       DEFAULT
                       -> let {
                            m :: GHC.Types.Int
                            = case n' of wild { GHC.Types.I# x1 ->
                              case GHC.Prim.<=# x1 wild3 of lwild {
                                DEFAULT -> GHC.Types.I# wild3 1# -> wild } }
                          } in
                          GHC.Types.:
                            @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                            (case m of dt { GHC.Types.I# dt1 ->
                             (Data.Vector.Primitive.Vector @ GHC.Types.Double ww4 dt1 ww6)
                               `cast`
                             (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) })
                            (case m of wild1 { GHC.Types.I# y ->
                             case n' of wild2 { GHC.Types.I# y1 ->
                             let {
                               y2 :: GHC.Prim.Int# = GHC.Prim.-# wild3 y1
                             } in
                             case GHC.Prim.<=# 0# y2 of lwild {
                               DEFAULT -> $wchunks (GHC.Prim.+# ww4 y) 0# ww6
                               1# -> $wchunks (GHC.Prim.+# ww4 y) y2 ww6 } } })
                       0#
                       -> GHC.Types.[]
                            @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double) }
                 } in
                 $wchunks ww1 ww2 ww3) -}
b070e57e4fc0e192ee0f4d66a9f1d99f
  $wtranspose ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Statistics.Matrix.Types.Vector #)
  {- Arity: 4, Strictness: <S,U><S,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           n :: GHC.Prim.Int# = GHC.Prim.*# ww ww1
                         } in
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (x :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.<# x 0# of lwild {
                               DEFAULT
                               -> case GHC.Prim.># x 1152921504606846975# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              (GHC.Prim.*# x 8#)
                                              s1
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           (Nth:0
                                                                (Nth:2
                                                                     (<GHC.Prim.State#
                                                                         GHC.Prim.RealWorld>_R
                                                                      ->_R ((#,#)
                                                                              <'GHC.Types.TupleRep
                                                                                 '[]>_R
                                                                              <'GHC.Types.LiftedRep>_R
                                                                              <GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld>_R
                                                                              (Data.Vector.Generic.Base.Mutable
                                                                                 <Data.Vector.Unboxed.Base.Vector>_N
                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                      <GHC.Prim.RealWorld>_N)
                                                                                 <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                                       let {
                                         exit :: GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.Unboxed.Base.Vector
                                                         GHC.Types.Double #)
                                           <join 2> {- Arity: 2, Strictness: <L,U><S,U> -}
                                         = \ (ww4 :: GHC.Prim.Int#)[OneShot]
                                             (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.unsafeFreezeByteArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  ipv1
                                                  w `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               (Nth:0
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (<GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld>_R
                                                                               ->_R ((#,#)
                                                                                       <'GHC.Types.TupleRep
                                                                                          '[]>_R
                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                       <GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld>_R
                                                                                       (Data.Vector.Generic.Base.Mutable
                                                                                          <Data.Vector.Unboxed.Base.Vector>_N
                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                    <GHC.Prim.RealWorld>_N))
                                                                                          <GHC.Types.Double>_N)_R)_R)))))))_R of ds2 { (#,#) ipv2 ipv3 ->
                                           (# ipv2
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N))_R,
                                              (Data.Vector.Primitive.Vector
                                                 @ GHC.Types.Double
                                                 0#
                                                 ww4
                                                 ipv3)
                                                `cast`
                                              (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) }
                                       } in
                                       letrec {
                                         $wfoldlM'_loop :: GHC.Types.SPEC
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Unboxed.Base.Vector
                                                                   GHC.Types.Double #)
                                           <join 4> {- Arity: 4, Strictness: <S,1*U><S,U><S,U><S,U>,
                                                       Inline: [2] -}
                                         = \ (w :: GHC.Types.SPEC)
                                             (ww4 :: GHC.Prim.Int#)
                                             (ww5 :: GHC.Prim.Int#)
                                             (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case w of ds5 { DEFAULT ->
                                           case GHC.Prim.<# ww5 n of lwild2 {
                                             DEFAULT -> exit ww4 w1
                                             1#
                                             -> case ww of wild {
                                                  DEFAULT
                                                  -> case GHC.Prim.quotRemInt#
                                                            ww5
                                                            wild of ds2 { (#,#) ipv2 ipv3 ->
                                                     case GHC.Prim.indexDoubleArray#
                                                            ww3
                                                            (GHC.Prim.+#
                                                               ww2
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.*# ipv3 ww1)
                                                                  ipv2)) of wild2 { DEFAULT ->
                                                     case GHC.Prim.writeDoubleArray#
                                                            @ (Control.Monad.Primitive.PrimState
                                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                                            ipv1
                                                            ww4
                                                            wild2
                                                            w1
                                                              `cast`
                                                            (GHC.Prim.State#
                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                         <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                     $wfoldlM'_loop
                                                       GHC.Types.SPEC
                                                       (GHC.Prim.+# ww4 1#)
                                                       (GHC.Prim.+# ww5 1#)
                                                       s'#
                                                         `cast`
                                                       (GHC.Prim.State#
                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <GHC.Prim.RealWorld>_N))_R } } }
                                                  -1#
                                                  -> case ww5 of wild1 {
                                                       DEFAULT
                                                       -> case GHC.Prim.quotRemInt#
                                                                 wild1
                                                                 -1# of ds2 { (#,#) ipv2 ipv3 ->
                                                          case GHC.Prim.indexDoubleArray#
                                                                 ww3
                                                                 (GHC.Prim.+#
                                                                    ww2
                                                                    (GHC.Prim.+#
                                                                       (GHC.Prim.*# ipv3 ww1)
                                                                       ipv2)) of wild2 { DEFAULT ->
                                                          case GHC.Prim.writeDoubleArray#
                                                                 @ (Control.Monad.Primitive.PrimState
                                                                      (GHC.ST.ST
                                                                         GHC.Prim.RealWorld))
                                                                 ipv1
                                                                 ww4
                                                                 wild2
                                                                 w1
                                                                   `cast`
                                                                 (GHC.Prim.State#
                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                          $wfoldlM'_loop
                                                            GHC.Types.SPEC
                                                            (GHC.Prim.+# ww4 1#)
                                                            (GHC.Prim.+# wild1 1#)
                                                            s'#
                                                              `cast`
                                                            (GHC.Prim.State#
                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                    <GHC.Prim.RealWorld>_N))_R } } }
                                                       -9223372036854775808#
                                                       -> case GHC.Real.overflowError
                                                          ret_ty (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Unboxed.Base.Vector
                                                                      GHC.Types.Double #)
                                                          of {} }
                                                  0#
                                                  -> case GHC.Real.divZeroError
                                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Vector.Unboxed.Base.Vector
                                                                 GHC.Types.Double #)
                                                     of {} } } }
                                       } in
                                       $wfoldlM'_loop
                                         GHC.Types.SPEC
                                         0#
                                         0#
                                         ipv
                                           `cast`
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 (Nth:0
                                                      (Nth:2
                                                           (Nth:3
                                                                (<GHC.Prim.State#
                                                                    GHC.Prim.RealWorld>_R
                                                                 ->_R ((#,#)
                                                                         <'GHC.Types.TupleRep '[]>_R
                                                                         <'GHC.Types.LiftedRep>_R
                                                                         <GHC.Prim.State#
                                                                            GHC.Prim.RealWorld>_R
                                                                         (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                       (GHC.ST.ST
                                                                                                                                          GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }
                                    1#
                                    -> case Statistics.Matrix.fromRows5 x
                                       ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                       of {} }
                               1#
                               -> case Statistics.Matrix.fromRows4 x
                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                                  of {} }
                         } in
                         case GHC.Prim.<=# n 0# of lwild {
                           DEFAULT -> $j n 1# -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv ipv4 ipv5 ->
                 (# ww1, ww,
                    nt
                      `cast`
                    (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) #) } }) -}
5bd15ac7be9114d11e9f2ce3c44773f8
  bounds ::
    (Statistics.Matrix.Types.Vector -> GHC.Types.Int -> r)
    -> Statistics.Matrix.Types.Matrix
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> r
  {- Arity: 4,
     Strictness: <C(C(S)),1*C1(C1(U))><S(SSS),1*U(U,U,U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ r ->
                 let {
                   loc7 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "dense-linear-algebra-0.1.0.0-9CfM7PgmKUpF60PvHRvGgf"#)
                 } in
                 let {
                   loc8 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Statistics.Matrix"#)
                 } in
                 let {
                   loc9 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Statistics/Matrix.hs"#)
                 } in
                 let {
                   loc10 :: GHC.Types.Int = GHC.Types.I# 252#
                 } in
                 let {
                   loc11 :: GHC.Types.Int = GHC.Types.I# 24#
                 } in
                 let {
                   loc12 :: GHC.Types.Int = GHC.Types.I# 252#
                 } in
                 let {
                   loc13 :: GHC.Types.Int = GHC.Types.I# 52#
                 } in
                 let {
                   $dIP2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP3 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc7 loc8 loc9 loc10 loc11 loc12 loc13
                 } in
                 let {
                   $dIP4 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP2
                       $dIP3
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 let {
                   loc14 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "dense-linear-algebra-0.1.0.0-9CfM7PgmKUpF60PvHRvGgf"#)
                 } in
                 let {
                   loc15 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Statistics.Matrix"#)
                 } in
                 let {
                   loc16 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Statistics/Matrix.hs"#)
                 } in
                 let {
                   loc17 :: GHC.Types.Int = GHC.Types.I# 251#
                 } in
                 let {
                   loc18 :: GHC.Types.Int = GHC.Types.I# 24#
                 } in
                 let {
                   loc19 :: GHC.Types.Int = GHC.Types.I# 251#
                 } in
                 let {
                   loc20 :: GHC.Types.Int = GHC.Types.I# 49#
                 } in
                 let {
                   $dIP5 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP6 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc14 loc15 loc16 loc17 loc18 loc19 loc20
                 } in
                 let {
                   $dIP7 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP5
                       $dIP6
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (k :: Statistics.Matrix.Types.Vector -> GHC.Types.Int -> r)
                   (ds :: Statistics.Matrix.Types.Matrix)
                   (r1 :: GHC.Types.Int)
                   (c :: GHC.Types.Int) ->
                 case ds of wild { Statistics.Matrix.Types.Matrix dt dt1 v ->
                 let {
                   $j :: r <join 0> {- Strictness: x -}
                   = GHC.Err.error
                       @ 'GHC.Types.LiftedRep
                       @ r
                       $dIP7
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                       (GHC.Base.build
                          @ GHC.Types.Char
                          (\ @ b ->
                           GHC.CString.unpackFoldrCString# @ b "row out of bounds"#))
                 } in
                 case GHC.Classes.ltInt r1 (GHC.Types.I# 0#) of wild1 {
                   GHC.Types.False
                   -> case GHC.Classes.geInt r1 (GHC.Types.I# dt) of wild2 {
                        GHC.Types.False
                        -> let {
                             $j1 :: r <join 0> {- Strictness: x -}
                             = GHC.Err.error
                                 @ 'GHC.Types.LiftedRep
                                 @ r
                                 $dIP4
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString# @ b "column out of bounds"#))
                           } in
                           case GHC.Classes.ltInt c (GHC.Types.I# 0#) of wild3 {
                             GHC.Types.False
                             -> case GHC.Classes.geInt c (GHC.Types.I# dt1) of wild4 {
                                  GHC.Types.False
                                  -> case r1 of wild5 { GHC.Types.I# x ->
                                     case c of wild6 { GHC.Types.I# y ->
                                     k v (GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x dt1) y)) } }
                                  GHC.Types.True -> $j1 }
                             GHC.Types.True -> $j1 }
                        GHC.Types.True -> $j }
                   GHC.Types.True -> $j } }) -}
09a922313169a55fa5dfe40a4d0a9b78
  center :: Statistics.Matrix.Types.Matrix -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSS(SLS)),1*U(U,U,U(U,A,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (mat :: Statistics.Matrix.Types.Matrix) ->
                 case mat of wild { Statistics.Matrix.Types.Matrix dt dt1 ds ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of wild1 { Data.Vector.Primitive.Vector dt2 dt3 dt4 ->
                 case GHC.Prim.indexDoubleArray#
                        dt4
                        (GHC.Prim.+#
                           dt2
                           (GHC.Prim.+#
                              (GHC.Prim.*# (GHC.Prim.quotInt# dt 2#) dt1)
                              (GHC.Prim.quotInt# dt1 2#))) of wild2 { DEFAULT ->
                 GHC.Types.D# wild2 } } }) -}
9ab2ae52ce7059e22e93c7af2889798a
  column ::
    Statistics.Matrix.Types.Matrix
    -> GHC.Types.Int -> Statistics.Matrix.Types.Vector
  {- Arity: 2, Strictness: <S(SLS),1*U(U,U,U(U,U,U))><S,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Statistics.Matrix.Types.Matrix) (i :: GHC.Types.Int) ->
                 case ds of wild { Statistics.Matrix.Types.Matrix dt dt1 v ->
                 case (Data.Vector.Fusion.Bundle.Monadic.length
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Unboxed.Base.Vector
                         @ GHC.Types.Double
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Unboxed.Base.Vector
                            @ GHC.Types.Double
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Unboxed.Base.$fVectorVectorDouble
                            v))
                        `cast`
                      (Data.Vector.Fusion.Util.N:Id[0]
                           <GHC.Types.Int>_R) of v3 { GHC.Types.I# ipv ->
                 Data.Vector.Generic.new
                   @ Data.Vector.Unboxed.Base.Vector
                   @ GHC.Types.Double
                   Data.Vector.Unboxed.Base.$fVectorVectorDouble
                   (Data.Vector.Generic.New.unstream
                      @ Data.Vector.Unboxed.Base.Vector
                      @ GHC.Types.Double
                      Data.Vector.Unboxed.Base.$fVectorVectorDouble
                      (Data.Vector.Fusion.Bundle.Monadic.unbox
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Unboxed.Base.Vector
                         @ GHC.Types.Double
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.mapM
                            @ Data.Vector.Fusion.Util.Id
                            @ GHC.Types.Int
                            @ (Data.Vector.Fusion.Util.Box GHC.Types.Double)
                            @ Data.Vector.Unboxed.Base.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (x :: GHC.Types.Int) ->
                             let {
                               file :: GHC.Base.String
                               = GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#)
                             } in
                             case GHC.Classes.geInt x (GHC.Types.I# 0#) of wild1 {
                               GHC.Types.False
                               -> case x of wild2 { GHC.Types.I# i# ->
                                  Data.Vector.Internal.Check.checkError
                                    @ (Data.Vector.Fusion.Util.Box GHC.Types.Double)
                                    file
                                    (GHC.Types.I# 955#)
                                    Data.Vector.Internal.Check.Bounds
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString# @ b "backpermute"#))
                                    (Data.Vector.Internal.Check.checkIndex_msg# i# ipv) }
                               GHC.Types.True
                               -> case GHC.Classes.ltInt x v3 of wild2 {
                                    GHC.Types.False
                                    -> case x of wild4 { GHC.Types.I# i# ->
                                       Data.Vector.Internal.Check.checkError
                                         @ (Data.Vector.Fusion.Util.Box GHC.Types.Double)
                                         file
                                         (GHC.Types.I# 955#)
                                         Data.Vector.Internal.Check.Bounds
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "backpermute"#))
                                         (Data.Vector.Internal.Check.checkIndex_msg# i# ipv) }
                                    GHC.Types.True
                                    -> case v `cast`
                                            (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of wild4 { Data.Vector.Primitive.Vector dt2 dt3 dt4 ->
                                       case x of wild5 { GHC.Types.I# y ->
                                       case GHC.Prim.indexDoubleArray#
                                              dt4
                                              (GHC.Prim.+# dt2 y) of wild6 { DEFAULT ->
                                       Data.Vector.Fusion.Util.Box
                                         @ GHC.Types.Double
                                         (GHC.Types.D# wild6) } } } } })
                              `cast`
                            (<GHC.Types.Int>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                           <Data.Vector.Fusion.Util.Box GHC.Types.Double>_R))
                            (Data.Vector.Generic.stream
                               @ Data.Vector.Unboxed.Base.Vector
                               @ GHC.Types.Int
                               Data.Vector.Unboxed.Base.$fVectorVectorInt
                               (case i of v2 { GHC.Types.I# ipv1 ->
                                Data.Vector.Generic.new
                                  @ Data.Vector.Unboxed.Base.Vector
                                  @ GHC.Types.Int
                                  Data.Vector.Unboxed.Base.$fVectorVectorInt
                                  (Data.Vector.Generic.New.unstream
                                     @ Data.Vector.Unboxed.Base.Vector
                                     @ GHC.Types.Int
                                     Data.Vector.Unboxed.Base.$fVectorVectorInt
                                     (Data.Vector.Fusion.Bundle.Monadic.enumFromStepN
                                        @ GHC.Types.Int
                                        @ Data.Vector.Fusion.Util.Id
                                        @ Data.Vector.Unboxed.Base.Vector
                                        GHC.Num.$fNumInt
                                        Data.Vector.Fusion.Util.$fMonadId
                                        v2
                                        (GHC.Types.I# dt1)
                                        (GHC.Types.I# dt))) }))))) } }) -}
8301d19db4e4d6392d295c2577418e97
  diag ::
    Statistics.Matrix.Types.Vector -> Statistics.Matrix.Types.Matrix
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Statistics.Matrix.Types.Vector) ->
                 case w `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww { Data.Vector.Primitive.Vector ww1 ww2 ww3 ->
                 case Statistics.Matrix.$wdiag
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Statistics.Matrix.Types.Matrix ww5 ww6 ww7 } }) -}
ae84ca416922c15ac1c7c256e22f3999
  diag1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7221d1a8914c95fce0dbc71bdab6a5ca
  diag2 ::
    GHC.Prim.Int#
    -> GHC.ST.ST
         s2
         (Data.Vector.Primitive.Mutable.MVector
            (Control.Monad.Primitive.PrimState (GHC.ST.ST s2))
            GHC.Types.Double)
  {- Arity: 1, Strictness: <B,U>x -}
f4e582c7c2f2c02fe1e7e140cd323975
  diag3 ::
    GHC.Prim.Int#
    -> GHC.ST.ST
         s2
         (Data.Vector.Primitive.Mutable.MVector
            (Control.Monad.Primitive.PrimState (GHC.ST.ST s2))
            GHC.Types.Double)
  {- Arity: 1, Strictness: <B,U>x -}
521871251d9ce91ce03ee2666ee475f2
  diag4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("./Data/Vector/Generic.hs"#) -}
5e1405114641342e4bde9d454e951ed9
  diag5 ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Double
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
2a0a75473f71045d7635374c85410c72
  dimension ::
    Statistics.Matrix.Types.Matrix -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Statistics.Matrix.Types.Matrix) ->
                 case ds of wild { Statistics.Matrix.Types.Matrix dt dt1 ds1 ->
                 (GHC.Types.I# dt, GHC.Types.I# dt1) }) -}
f3fa2ef9462a0df5317b30e21f9b219a
  fromColumns ::
    [Statistics.Matrix.Types.Vector] -> Statistics.Matrix.Types.Matrix
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Statistics.Matrix.Types.Vector]) ->
                 Statistics.Matrix.transpose (Statistics.Matrix.fromRows x)) -}
5001be4584335e947f442e72709c0b8e
  fromList ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Double]
    -> Statistics.Matrix.Types.Matrix
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(U)><S,1*U>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [GHC.Types.Double]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             (Nth:0
                                                  (Nth:2
                                                       (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                <GHC.Prim.State#
                                                                   GHC.Prim.RealWorld>_R
                                                                (Data.Vector.Generic.Base.Mutable
                                                                   <Data.Vector.Unboxed.Base.Vector>_N
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N)
                                                                   <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                         Statistics.Matrix.$wfoldlM_loop
                           GHC.Types.SPEC
                           0#
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableByteArray#
                              (Nth:0
                                   (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                             <Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST
                                                   GHC.Prim.RealWorld)>_N) ; (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                       <Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld)>_N) ; (Nth:3
                                                                                                                            (Nth:3
                                                                                                                                 (<GHC.Prim.State#
                                                                                                                                     GHC.Prim.RealWorld>_R
                                                                                                                                  ->_R ((#,#)
                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                             '[]>_R
                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                          <GHC.Prim.State#
                                                                                                                                             GHC.Prim.RealWorld>_R
                                                                                                                                          (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                                                        (GHC.ST.ST
                                                                                                                                                                                                           GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R)) ; (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <GHC.Types.Double>_N ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                                                                                                                                                                                                                                                             <GHC.Prim.RealWorld>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                                                                                                                                                                                                                                                                          <GHC.Prim.RealWorld>_N)))))))_R
                           0#
                           w2
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   (Nth:0
                                        (Nth:2
                                             (Nth:3
                                                  (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                           (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                         (GHC.ST.ST
                                                                                                                            GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv ipv4 ipv5 ->
                 case GHC.Prim./=# (GHC.Prim.*# ww1 ww3) ipv4 of lwild {
                   DEFAULT
                   -> Statistics.Matrix.Types.Matrix
                        ww1
                        ww3
                        nt
                          `cast`
                        (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0]))
                   1# -> Statistics.Matrix.fromRows3 } } } } }) -}
178a05e16fc29647c3ac8b04b3a552a5
  fromRowLists ::
    [[GHC.Types.Double]] -> Statistics.Matrix.Types.Matrix
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[GHC.Types.Double]]) ->
                 Statistics.Matrix.fromRows
                   (GHC.Base.build
                      @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                      (\ @ b1
                         (c :: Data.Vector.Unboxed.Base.Vector GHC.Types.Double
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Double]
                         @ b1
                         (GHC.Base.mapFB
                            @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                            @ b1
                            @ [GHC.Types.Double]
                            c
                            Statistics.Matrix.fromRowLists1)
                         n
                         x))) -}
dd60fac28dc8d193151d689e7eadb799
  fromRowLists1 ::
    [GHC.Types.Double]
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Double]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Unboxed.Base.Vector GHC.Types.Double #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             (Nth:0
                                                  (Nth:2
                                                       (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                <GHC.Prim.State#
                                                                   GHC.Prim.RealWorld>_R
                                                                (Data.Vector.Generic.Base.Mutable
                                                                   <Data.Vector.Unboxed.Base.Vector>_N
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N)
                                                                   <GHC.Types.Double>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                         Statistics.Matrix.$wfoldlM_loop1
                           GHC.Types.SPEC
                           0#
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableByteArray#
                              (Nth:0
                                   (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                             <Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST
                                                   GHC.Prim.RealWorld)>_N) ; (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                       <Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld)>_N) ; (Nth:3
                                                                                                                            (Nth:3
                                                                                                                                 (<GHC.Prim.State#
                                                                                                                                     GHC.Prim.RealWorld>_R
                                                                                                                                  ->_R ((#,#)
                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                             '[]>_R
                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                          <GHC.Prim.State#
                                                                                                                                             GHC.Prim.RealWorld>_R
                                                                                                                                          (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                                                        (GHC.ST.ST
                                                                                                                                                                                                           GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R)) ; (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <GHC.Types.Double>_N ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                                                                                                                                                                                                                                                             <GHC.Prim.RealWorld>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                                                                                                                                                                                                                                                                          <GHC.Prim.RealWorld>_N)))))))_R
                           0#
                           x
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   (Nth:0
                                        (Nth:2
                                             (Nth:3
                                                  (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                           (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                         (GHC.ST.ST
                                                                                                                            GHC.Prim.RealWorld)>_N <GHC.Types.Double>_N))_R))))))_R }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
cd60adad65026c7b28c52fb9b7aff3b8
  fromRows ::
    [Statistics.Matrix.Types.Vector] -> Statistics.Matrix.Types.Matrix
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Statistics.Matrix.Types.Vector]) ->
                 case Statistics.Matrix.$wfromRows w of ww { (#,,#) ww1 ww2 ww3 ->
                 Statistics.Matrix.Types.Matrix ww1 ww2 ww3 }) -}
77d3ede48714302142374e1b5f3bf04d
  fromRows1 :: Statistics.Matrix.Types.Matrix
  {- Strictness: x -}
edcfde55a9c90a8196d1e6330b1e5fdb
  fromRows2 :: Statistics.Matrix.Types.Matrix
  {- Strictness: x -}
8c21767b552ff32b8511013d905b98b3
  fromRows3 :: Statistics.Matrix.Types.Matrix
  {- Strictness: x -}
aeac63707118de17940266401f595d7a
  fromRows4 ::
    GHC.Prim.Int#
    -> GHC.ST.ST
         GHC.Prim.RealWorld
         (Data.Vector.Primitive.Mutable.MVector
            (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
            GHC.Types.Double)
  {- Arity: 1, Strictness: <B,U>x -}
024d0f9b9de1167f25ac9fb7234a5cba
  fromRows5 ::
    GHC.Prim.Int#
    -> GHC.ST.ST
         GHC.Prim.RealWorld
         (Data.Vector.Primitive.Mutable.MVector
            (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
            GHC.Types.Double)
  {- Arity: 1, Strictness: <B,U>x -}
00412947953e4304b57d98164d9639cb
  fromRows6 :: (GHC.Types.Int, [GHC.Types.Int])
  {- Strictness: x -}
92439a87a369461191a349ca59fc878b
  fromRows7 ::
    Data.Vector.Unboxed.Base.Vector GHC.Types.Double
    -> Data.Vector.Fusion.Util.Id GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Vector.Unboxed.Base.Vector GHC.Types.Double) ->
                 case x `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv ipv1 ipv2 ->
                 (GHC.Types.I# ipv1)
                   `cast`
                 (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R)) }) -}
ab019993a268f6c363b8e8f7fad28bfd
  fromRows8 :: Statistics.Matrix.Types.Matrix
  {- Strictness: x -}
3af010f7a6ce183f9913815c85df9901
  fromVector ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Double
    -> Statistics.Matrix.Types.Matrix
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(LSL),1*U(U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (r :: GHC.Types.Int)
                   (c :: GHC.Types.Int)
                   (v :: Data.Vector.Unboxed.Base.Vector GHC.Types.Double) ->
                 case r of wild { GHC.Types.I# x ->
                 case c of wild1 { GHC.Types.I# y ->
                 case v `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of nt { Data.Vector.Primitive.Vector ipv ipv1 ipv2 ->
                 case GHC.Prim./=# (GHC.Prim.*# x y) ipv1 of lwild {
                   DEFAULT
                   -> Statistics.Matrix.Types.Matrix
                        x
                        y
                        (Data.Vector.Primitive.Vector @ GHC.Types.Double ipv ipv1 ipv2)
                          `cast`
                        (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0]))
                   1# -> Statistics.Matrix.fromRows3 } } } }) -}
7cc1f99587df12bdd4bfb353275daacb
  generate ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double)
    -> Statistics.Matrix.Types.Matrix
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,C(C1(U(U)))>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case Statistics.Matrix.$wgenerate
                        ww1
                        ww3
                        w2 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Statistics.Matrix.Types.Matrix ww5 ww6 ww7 } } }) -}
79717cc5d5f9764d8f817ba5b7b4f48c
  generate1 :: (GHC.Types.Int, GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((GHC.Real.overflowError @ GHC.Types.Int,
                  GHC.Real.$fIntegralInt1)) -}
1c352422151df91a1f9f13d3546b4db5
  generateSym ::
    GHC.Types.Int
    -> (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double)
    -> Statistics.Matrix.Types.Matrix
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(C1(U(U)))>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Statistics.Matrix.$wgenerateSym ww1 w1 }) -}
e201f44ac903c71d8acceb1654bfcbf6
  hasNaN :: Statistics.Matrix.Types.Matrix -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(SSS)),1*U(A,A,U(U,U,U))>,
     Unfolding: InlineRule (0, True, True)
                Statistics.Matrix.hasNaN1
                  `cast`
                (<Statistics.Matrix.Types.Matrix>_R
                 ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) -}
ed430b9937ae98a53b2e70447721bcb9
  hasNaN1 ::
    Statistics.Matrix.Types.Matrix
    -> Data.Vector.Fusion.Util.Id GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(SSS)),1*U(A,A,U(U,U,U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 Statistics.Matrix.$whasNaN ww5 ww6 ww7 } }) -}
b74ceacc404243b72c281338c9d8db23
  ident :: GHC.Types.Int -> Statistics.Matrix.Types.Matrix
  {- Arity: 1, Strictness: <S(S),1*U(U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Statistics.Matrix.$wident ww1 of ww2 { (#,,#) ww3 ww4 ww5 ->
                 Statistics.Matrix.Types.Matrix ww3 ww4 ww5 } }) -}
f2162503d169a677485c8334956fa3b9
  map ::
    (GHC.Types.Double -> GHC.Types.Double)
    -> Statistics.Matrix.Types.Matrix -> Statistics.Matrix.Types.Matrix
  {- Arity: 2,
     Strictness: <L,C(U(U))><S(SSS(SSS)),1*U(U,U,U(U,U,U))>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double -> GHC.Types.Double)
                   (w1 :: Statistics.Matrix.Types.Matrix) ->
                 case w1 of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 case Statistics.Matrix.$wmap
                        w
                        ww1
                        ww2
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Statistics.Matrix.Types.Matrix ww9 ww10 ww11 } } }) -}
be53273fa2d7fe026da435437fd420f7
  multiply ::
    Statistics.Matrix.Types.Matrix
    -> Statistics.Matrix.Types.Matrix -> Statistics.Matrix.Types.Matrix
  {- Arity: 2,
     Strictness: <S(SSS(SSS)),1*U(U,U,U(U,U,U))><S(SSS(SSS)),1*U(U,U,U(U,U,U))>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix)
                   (w1 :: Statistics.Matrix.Types.Matrix) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 case w1 of ww8 { Statistics.Matrix.Types.Matrix ww9 ww10 ww11 ->
                 case ww11
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww12 { Data.Vector.Primitive.Vector ww13 ww14 ww15 ->
                 case Statistics.Matrix.$wmultiply
                        ww1
                        ww2
                        ww5
                        ww6
                        ww7
                        ww9
                        ww10
                        ww13
                        ww14
                        ww15 of ww16 { (#,,#) ww17 ww18 ww19 ->
                 Statistics.Matrix.Types.Matrix ww17 ww18 ww19 } } } } }) -}
54a7f5523949dbad327cdc20b17e3658
  multiplyV ::
    Statistics.Matrix.Types.Matrix
    -> Statistics.Matrix.Types.Vector -> Statistics.Matrix.Types.Vector
  {- Arity: 2,
     Strictness: <S(SSS(SSS)),1*U(U,U,U(U,U,U))><S(SSS),1*U(U,U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix)
                   (w1 :: Statistics.Matrix.Types.Vector) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 case w1
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww8 { Data.Vector.Primitive.Vector ww9 ww10 ww11 ->
                 Statistics.Matrix.$wmultiplyV
                   ww1
                   ww2
                   ww5
                   ww6
                   ww7
                   ww9
                   ww10
                   ww11 } } }) -}
d81ade974f0e3fd2f35ace217f863813
  multiplyV1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Double
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
8882a7c3ab8523c1509c9183abb84892
  norm :: Statistics.Matrix.Types.Vector -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Statistics.Matrix.Types.Vector) ->
                 case w `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww { Data.Vector.Primitive.Vector ww1 ww2 ww3 ->
                 case Statistics.Matrix.$wnorm ww1 ww2 ww3 of ww4 { DEFAULT ->
                 GHC.Types.D# ww4 } }) -}
bd3268ba5bb094f48ee664f89afabe48
  power ::
    Statistics.Matrix.Types.Matrix
    -> GHC.Types.Int -> Statistics.Matrix.Types.Matrix
  {- Arity: 2,
     Strictness: <S(SSS),1*U(U,U,U(U,U,U))><S(S),1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix) (w1 :: GHC.Types.Int) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case w1 of ww4 { GHC.Types.I# ww5 ->
                 case Statistics.Matrix.$wpower
                        ww1
                        ww2
                        ww3
                        ww5 of ww6 { (#,,#) ww7 ww8 ww9 ->
                 Statistics.Matrix.Types.Matrix ww7 ww8 ww9 } } }) -}
d349b7f2412f0f2d129b29c441b18aa7
  row ::
    Statistics.Matrix.Types.Matrix
    -> GHC.Types.Int -> Statistics.Matrix.Types.Vector
  {- Arity: 2,
     Strictness: <S(LSS(SSS)),1*U(A,U,U(U,U,U))><S(S),1*U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix) (w1 :: GHC.Types.Int) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 case w1 of ww8 { GHC.Types.I# ww9 ->
                 case Statistics.Matrix.$wrow
                        ww2
                        ww5
                        ww6
                        ww7
                        ww9 of ww10 { (#,,#) ww11 ww12 ww13 ->
                 (Data.Vector.Primitive.Vector @ GHC.Types.Double ww11 ww12 ww13)
                   `cast`
                 (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0])) } } } }) -}
bd4e31992b6378b587260f72ab6249fc
  toColumns ::
    Statistics.Matrix.Types.Matrix -> [Statistics.Matrix.Types.Vector]
  {- Arity: 1, Strictness: <S(SSS(SLS)),1*U(U,U,U(U,A,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Statistics.Matrix.Types.Matrix) ->
                 Statistics.Matrix.toRows (Statistics.Matrix.transpose x)) -}
4b598f1c5a1078800cea3fccfd427caf
  toList :: Statistics.Matrix.Types.Matrix -> [GHC.Types.Double]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(SSS)),1*U(A,A,U(U,U,U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 Statistics.Matrix.$wtoList ww5 ww6 ww7 } }) -}
a955a4f518a7ab7476de66946997129e
  toRowLists ::
    Statistics.Matrix.Types.Matrix -> [[GHC.Types.Double]]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSS(SSS)),1*U(A,U,U(U,U,U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 Statistics.Matrix.$wtoRowLists ww2 ww5 ww6 ww7 } }) -}
4f354df8944c17282a341f1f5aee19ee
  toRows ::
    Statistics.Matrix.Types.Matrix -> [Statistics.Matrix.Types.Vector]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSS(SSS)),1*U(A,U,U(U,1*U,U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 Statistics.Matrix.$wtoRows ww2 ww5 ww6 ww7 } }) -}
b91e8b50cdf27861eb4dd4561ee62a1a
  toVector ::
    Statistics.Matrix.Types.Matrix
    -> Data.Vector.Unboxed.Base.Vector GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Statistics.Matrix.Types.Matrix) ->
                 case ds of wild { Statistics.Matrix.Types.Matrix dt dt1 v ->
                 v }) -}
ca63fc3b29a91fd6b3cb7811283f94fe
  transpose ::
    Statistics.Matrix.Types.Matrix -> Statistics.Matrix.Types.Matrix
  {- Arity: 1, Strictness: <S(SSS(SLS)),1*U(U,U,U(U,A,U))>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Statistics.Matrix.Types.Matrix) ->
                 case w of ww { Statistics.Matrix.Types.Matrix ww1 ww2 ww3 ->
                 case ww3
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) of ww4 { Data.Vector.Primitive.Vector ww5 ww6 ww7 ->
                 case Statistics.Matrix.$wtranspose
                        ww1
                        ww2
                        ww5
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Statistics.Matrix.Types.Matrix ww9 ww10 ww11 } } }) -}
f7b794da242ad117e342875b0937bfd6
  unsafeBounds ::
    (Statistics.Matrix.Types.Vector -> GHC.Types.Int -> r)
    -> Statistics.Matrix.Types.Matrix
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> r
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><S(LLS),1*U(A,U,U)><S,1*U(U)><S,1*U(U)>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ r
                   (k :: Statistics.Matrix.Types.Vector -> GHC.Types.Int -> r)
                   (ds :: Statistics.Matrix.Types.Matrix)
                   (r1 :: GHC.Types.Int)
                   (c :: GHC.Types.Int) ->
                 case ds of wild { Statistics.Matrix.Types.Matrix dt dt1 v ->
                 case r1 of wild1 { GHC.Types.I# x ->
                 case c of wild2 { GHC.Types.I# y ->
                 k v (GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x dt1) y)) } } }) -}
52fee3bfe908ea54bcab4db0c47522e6
  unsafeIndex ::
    Statistics.Matrix.Types.Matrix
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (Statistics.Matrix.unsafeBounds
                   @ GHC.Types.Double
                   Statistics.Matrix.$sunsafeIndex) -}
"SPEC/Statistics.Matrix unsafeIndex @ Vector @ Double" [orphan] [1] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                          Data.Vector.Unboxed.Base.Vector
                                                                                          GHC.Types.Double)
  Data.Vector.Generic.unsafeIndex @ Data.Vector.Unboxed.Base.Vector
                                  @ GHC.Types.Double
                                  $dVector
  = Statistics.Matrix.$sunsafeIndex
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

