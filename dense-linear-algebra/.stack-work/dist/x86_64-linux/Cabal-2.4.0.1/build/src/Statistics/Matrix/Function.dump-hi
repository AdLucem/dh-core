
==================== FINAL INTERFACE ====================
2019-02-26 14:07:33.480273657 UTC

interface dense-linear-algebra-0.1.0.0-37BeN9eTwjI5pkGsQBKaZw:Statistics.Matrix.Function 8063
  interface hash: 209edf574c18d1abfc6efb08153a981a
  ABI hash: 1ff23262872805be3e37b5f602ab6100
  export-list hash: 7810c07f51b5d2730b96b885065d01aa
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 342713f7ad012e1211b28f6756077a2b
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Statistics.Matrix.Function.for
  Statistics.Matrix.Function.square
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
601bdc9316b98c7ebf8dd22647d056eb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Statistics.Matrix.Function.$trModule3
                   Statistics.Matrix.Function.$trModule1) -}
25ad175492768f98996e70997307c1cd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Statistics.Matrix.Function.$trModule2) -}
395deb1e3dde87057d466158be65ce7a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Statistics.Matrix.Function"#) -}
0b9705a71edc7b0efa5b174c3b101f96
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Statistics.Matrix.Function.$trModule4) -}
4a593f579b4f07c46af2c688ec1d792d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("dense-linear-algebra-0.1.0.0-37BeN9eTwjI5pkGsQBKaZw"#) -}
d720f4a128a193abbdaa1027cba67467
  for ::
    GHC.Base.Monad m =>
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int -> m ()) -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),1*C1(U),A)><S(S),1*U(U)><S(S),1*U(U)><L,C(U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (n0 :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (f :: GHC.Types.Int -> m ()) ->
                 case n of n1 { GHC.Types.I# ipv ->
                 letrec {
                   loop :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.eqInt i n1 of wild {
                       GHC.Types.False
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (f i)
                            (loop
                               (case i of wild1 { GHC.Types.I# x ->
                                GHC.Types.I# (GHC.Prim.+# x 1#) }))
                       GHC.Types.True -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() }
                 } in
                 loop n0 }) -}
d748367e11e18af3ae3e47495762ba1e
  square :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) -> GHC.Float.timesDouble x x) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

